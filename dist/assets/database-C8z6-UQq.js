console.warn("⚠️ Variáveis do Supabase não configuradas. Usando modo fallback.");const o=null,l=()=>o!==null;class n{constructor(){this.isConfigured=l(),this.isConfigured||console.warn("⚠️ Supabase não configurado. Usando armazenamento local como fallback.")}async createLead(r){if(!this.isConfigured)return this.createLeadFallback(r);try{const{data:e,error:a}=await o.from("leads").insert([r]).select().single();return a?(console.error("Erro ao criar lead:",a),this.createLeadFallback(r)):(console.log("✅ Lead criado no Supabase:",e),{success:!0,data:e})}catch(e){return console.error("Erro na criação do lead:",e),this.createLeadFallback(r)}}async getLeadByCPF(r){if(!this.isConfigured)return this.getLeadByCPFFallback(r);try{const{data:e,error:a}=await o.from("leads").select("*").eq("cpf",r.replace(/[^\d]/g,"")).single();return a&&a.code!=="PGRST116"?(console.error("Erro ao buscar lead:",a),this.getLeadByCPFFallback(r)):{success:!0,data:e||null}}catch(e){return console.error("Erro na busca do lead:",e),this.getLeadByCPFFallback(r)}}async updateLeadStage(r,e){if(!this.isConfigured)return this.updateLeadStageFallback(r,e);try{const{data:a,error:t}=await o.from("leads").update({etapa_atual:e}).eq("cpf",r.replace(/[^\d]/g,"")).select().single();return t?(console.error("Erro ao atualizar etapa:",t),this.updateLeadStageFallback(r,e)):(console.log("✅ Etapa atualizada no Supabase:",a),{success:!0,data:a})}catch(a){return console.error("Erro na atualização da etapa:",a),this.updateLeadStageFallback(r,e)}}async updatePaymentStatus(r,e){if(!this.isConfigured)return this.updatePaymentStatusFallback(r,e);try{const{data:a,error:t}=await o.from("leads").update({status_pagamento:e}).eq("cpf",r.replace(/[^\d]/g,"")).select().single();return t?(console.error("Erro ao atualizar status de pagamento:",t),this.updatePaymentStatusFallback(r,e)):(console.log("✅ Status de pagamento atualizado no Supabase:",a),{success:!0,data:a})}catch(a){return console.error("Erro na atualização do status de pagamento:",a),this.updatePaymentStatusFallback(r,e)}}createLeadFallback(r){try{const e=JSON.parse(localStorage.getItem("leads")||"[]"),a={...r,id:Date.now().toString(),created_at:new Date().toISOString(),updated_at:new Date().toISOString()};return e.push(a),localStorage.setItem("leads",JSON.stringify(e)),console.log("✅ Lead criado no localStorage:",a),{success:!0,data:a}}catch(e){return console.error("Erro no fallback de criação:",e),{success:!1,error:e.message}}}getLeadByCPFFallback(r){try{return{success:!0,data:JSON.parse(localStorage.getItem("leads")||"[]").find(t=>t.cpf===r.replace(/[^\d]/g,""))||null}}catch(e){return console.error("Erro no fallback de busca:",e),{success:!1,error:e.message}}}updateLeadStageFallback(r,e){try{const a=JSON.parse(localStorage.getItem("leads")||"[]"),t=a.findIndex(s=>s.cpf===r.replace(/[^\d]/g,""));return t!==-1?(a[t].etapa_atual=e,a[t].updated_at=new Date().toISOString(),localStorage.setItem("leads",JSON.stringify(a)),console.log("✅ Etapa atualizada no localStorage:",a[t]),{success:!0,data:a[t]}):{success:!1,error:"Lead não encontrado"}}catch(a){return console.error("Erro no fallback de atualização:",a),{success:!1,error:a.message}}}updatePaymentStatusFallback(r,e){try{const a=JSON.parse(localStorage.getItem("leads")||"[]"),t=a.findIndex(s=>s.cpf===r.replace(/[^\d]/g,""));return t!==-1?(a[t].status_pagamento=e,a[t].updated_at=new Date().toISOString(),localStorage.setItem("leads",JSON.stringify(a)),console.log("✅ Status de pagamento atualizado no localStorage:",a[t]),{success:!0,data:a[t]}):{success:!1,error:"Lead não encontrado"}}catch(a){return console.error("Erro no fallback de atualização de pagamento:",a),{success:!1,error:a.message}}}}export{n as DatabaseService};
