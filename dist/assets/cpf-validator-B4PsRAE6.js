class d{static formatCPF(t){const e=t.replace(/[^\d]/g,"");return e.length<=11?e.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/,"$1.$2.$3-$4"):t}static cleanCPF(t){return t.replace(/[^\d]/g,"")}static isValidCPF(t){const e=this.cleanCPF(t);return e.length!==11||/^(\d)\1{10}$/.test(e)?!1:this.validateCPFDigits(e)}static validateCPFDigits(t){let e=0;for(let a=0;a<9;a++)e+=parseInt(t.charAt(a))*(10-a);let r=11-e%11;if((r>=10?0:r)!==parseInt(t.charAt(9)))return!1;e=0;for(let a=0;a<10;a++)e+=parseInt(t.charAt(a))*(11-a);return r=11-e%11,(r>=10?0:r)===parseInt(t.charAt(10))}static applyCPFMask(t){let e=t.value.replace(/[^\d]/g,"");return e.length>11&&(e=e.slice(0,11)),e.length>9?e=e.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/,"$1.$2.$3-$4"):e.length>6?e=e.replace(/(\d{3})(\d{3})(\d{3})/,"$1.$2.$3"):e.length>3&&(e=e.replace(/(\d{3})(\d{3})/,"$1.$2")),t.value=e,e}}export{d as C};
